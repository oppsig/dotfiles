" ================ General ======================== {{{
set t_Co=256
set title
set number

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on
set clipboard+=unnamedplus

syntax enable
set background=dark

"Enable folding
set foldmethod=indent
set foldlevel=99

" UTF8 support
set encoding=utf-8

" Start NERDTree if vim is started without file
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Persistant undo file
"au BufWritePre /tmp/* setlocal shift.py
set undofile
set undodir=~/.config/nvim/undo
set undolevels=5000


" }}}

" ================ Plugins ======================== {{{
call plug#begin('~/.config/nvim/bundle')
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Vimshell
Plug 'flazz/vim-colorschemes' 		" Vim colorschemes
Plug 'tmhedberg/SimpylFold' 		" Auto folding
Plug 'vim-scripts/indentpython.vim' 	" Auto indent
Plug 'zchee/deoplete-jedi'		" Jedi framework for deoplete.
Plug 'neomake/neomake'
Plug 'nvie/vim-flake8'
Plug 'vim-airline/vim-airline'		"alternative to powerline
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'rhysd/github-complete.vim'
Plug 'bitc/vim-bad-whitespace'
Plug 'smancill/conky-syntax.vim'
Plug 'tpope/vim-commentary'
Plug 'sbdchd/vim-run'
Plug 'vim-scripts/Highlight-UnMatched-Brackets'
Plug 'vim-syntastic/syntastic'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'chr4/nginx.vim' " nginx
Plug 'lepture/vim-jinja' " nginx jinja highlight test
Plug 'overcache/NeoSolarized'

"Plug 'critiqjo/lldb.nvim'
call plug#end()

" -}}}

" ================ Plugin config ======================== {{{
"Plugins config
let g:deoplete#enable_at_startup = 1
let g:airline_powerline_fonts = 1
let g:run_cmd_python = ['python3']
"let g:airline_theme = 'tmuxline'

" Colorscheme
"colorscheme solarized
set termguicolors
colorscheme NeoSolarized
let g:deoplete#enable_at_startup = 1
let g:solarized_termcolors=256

" Init
let g:SimpylFold_docstring_preview=1
let python_highlight_all=1
syntax on


"-}}}

" ================ Python ======================== {{{
" Python indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \| set softtabstop=4
    \| set shiftwidth=4
    \| set textwidth=100
    \| set expandtab
    \| set autoindent
    \| set fileformat=unix

" Flagging Unnecessary whitespace
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

"-}}}

" ================ Keymaps ======================== {{{
" Keymaps
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding with the spacebar
nnoremap <space> za

nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>

" Bind F5 to save file if modified and execute python script in a buffer.
nnoremap <silent> <F5> :call SaveAndExecutePython()<CR>
vnoremap <silent> <F5> :<C-u>call SaveAndExecutePython()<CR>

function! SaveAndExecutePython()
    " SOURCE [reusable window]: https://github.com/fatih/vim-go/blob/master/autoload/go/ui.vim

    " save and reload current file
    silent execute "update | edit"

    " get file path of current file
    let s:current_buffer_file_path = expand("%")

    let s:output_buffer_name = "Python"
    let s:output_buffer_filetype = "output"

    " reuse existing buffer window if it exists otherwise create a new one
    if !exists("s:buf_nr") || !bufexists(s:buf_nr)
        silent execute 'botright new ' . s:output_buffer_name
        let s:buf_nr = bufnr('%')
    elseif bufwinnr(s:buf_nr) == -1
        silent execute 'botright new'
        silent execute s:buf_nr . 'buffer'
    elseif bufwinnr(s:buf_nr) != bufwinnr('%')
        silent execute bufwinnr(s:buf_nr) . 'wincmd w'
    endif

    silent execute "setlocal filetype=" . s:output_buffer_filetype
    setlocal bufhidden=delete
    setlocal buftype=nofile
    setlocal noswapfile
    setlocal nobuflisted
    setlocal winfixheight
    setlocal cursorline " make it easy to distinguish
    setlocal nonumber
    setlocal norelativenumber
    setlocal showbreak=""

    " clear the buffer
    setlocal noreadonly
    setlocal modifiable
    %delete _

    " add the console output
    silent execute ".!python " . shellescape(s:current_buffer_file_path, 1)

    " resize window to content length
    " Note: This is annoying because if you print a lot of lines then your code buffer is forced to a height of one line every time you run this function.
    " However without this line the buffer starts off as a default size and if you resize the buffer then it keeps that custom size after repeated runs of this function.
    " But if you close the output buffer then it returns to using the default size when its recreated
    " execute 'resize' . line('$')
    " make the buffer non modifiable
    setlocal readonly
    setlocal nomodifiable
endfunction

" Switch tabs with Control-Left and Control-Right
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>

" Source local vim additions!
if !empty(glob("~/.localvim"))
   so ~/.localvim
endif

"- }}}

" vim:foldenable:foldmethod=marker
